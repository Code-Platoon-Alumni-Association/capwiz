{"version":3,"sources":["assets/logoatee.png","assets/logoload.png","assets/logolove.png","assets/logolook.png","assets/logotalk.png","CapwizTheVirtual.js","useInterval.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CapwizTheVirtual","useState","currentPhoto","setCurrentPhoto","photos","Array","from","logoatee","logoload","logolook","logolove","logotalk","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","next","length","src","className","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,qPCQ5B,SAASC,IAAoB,IAAD,EACDC,mBAAS,GADR,mBAClCC,EADkC,KACpBC,EADoB,KAEnCC,EAASC,MAAMC,KAAK,CAACC,IAAUC,IAAUC,IAAUC,IAAUC,MAOnE,OCfa,SAAqBC,EAAUC,GAC5C,IAAMC,EAAgBC,mBAGtBC,qBAAU,WACRF,EAAcG,QAAUL,KAI1BI,qBAAU,WAIR,GAAc,OAAVH,EAAgB,CAClB,IAAIK,EAAKC,aAJX,WACEL,EAAcG,YAGaJ,GAC3B,OAAO,kBAAMO,cAAcF,OAE5B,CAACL,IDPJQ,EAAY,WACV,IAAMC,EAAOpB,GAAgBE,EAAOmB,OAAS,EAAI,EAAKrB,EAAe,EACrEC,EAAgBmB,KACf,KAGD,yBAAKE,IAAKpB,EAAOF,GAAeuB,UAAU,WAAWC,IAAI,S,MEK9CC,MAnBf,WACE,OACE,yBAAKF,UAAU,OACb,yBAAKA,UAAU,YACb,wBAAIA,UAAU,SAAd,kBAAqC,0BAAMA,UAAU,SAAhB,WACrC,kBAACzB,EAAD,MACA,wBAAIyB,UAAU,SAAd,cAAiC,0BAAMA,UAAU,SAAhB,mBACjC,wBAAIA,UAAU,SAAd,yTAMA,wBAAIA,UAAU,SAAd,+BCLYG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a94ae6e6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logoatee.5f6f13fa.png\";","module.exports = __webpack_public_path__ + \"static/media/logoload.67f4a397.png\";","module.exports = __webpack_public_path__ + \"static/media/logolove.bbd64af3.png\";","module.exports = __webpack_public_path__ + \"static/media/logolook.fd7a96af.png\";","module.exports = __webpack_public_path__ + \"static/media/logotalk.f210d71b.png\";","import React, { useState } from 'react'\nimport useInterval from './useInterval'\nimport logoatee from './assets/logoatee.png'\nimport logoload from './assets/logoload.png'\nimport logolove from './assets/logolove.png'\nimport logolook from './assets/logolook.png'\nimport logotalk from './assets/logotalk.png'\n\nexport default function CapwizTheVirtual() {\n  const [currentPhoto, setCurrentPhoto] = useState(0)\n  const photos = Array.from([logoatee, logoload, logolook, logolove, logotalk])\n\n  useInterval(() => {\n    const next = currentPhoto >= photos.length - 1 ? 0 : (currentPhoto + 1)\n    setCurrentPhoto(next);\n  }, 1000)\n\n  return (\n    <img src={photos[currentPhoto]} className=\"App-logo\" alt=\"logo\" />\n  )\n}\n","import { useEffect, useRef } from 'react'\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from 'react';\nimport CapwizTheVirtual from './CapwizTheVirtual'\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-page\">\n        <h1 className=\"serif\">Hello maker of <span className='space'>magic!</span></h1>\n        <CapwizTheVirtual />\n        <h2 className='serif'>I'm Capwiz <span className=\"space\">the Virtual...</span></h2>\n        <h3 className='serif'>\n          I'm a web wizard, and I exist to help crafters of digital realms formulate technopotions.\n          I'm Merlin, you & you're team are Arthur & the Knights of the Roundtable.\n          The project your building is the stone... the capâ€“stone; and your success is Excalibur.\n          If your ready to begin tell me about your project...\n        </h3>\n        <h4 className='serif'>Describe your project...</h4>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}